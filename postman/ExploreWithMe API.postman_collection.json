{
	"info": {
		"_postman_id": "3e05e668-0a51-4a35-91b5-05734cd29e04",
		"name": "ExploreWithMe API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43504393",
		"_collection_link": "https://tests7-4381.postman.co/workspace/c2e0b0ed-d3a1-4be7-b15e-6d1a94cd77b5/collection/43504393-3e05e668-0a51-4a35-91b5-05734cd29e04?action=share&source=collection_link&creator=43504393"
	},
	"item": [
		{
			"name": "1.1 Создать пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Пользователь успешно создан\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"user_id_1\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Владимир\",\r\n  \"email\": \"vladimir@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.2 Создать второго пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Второй пользователь успешно создан\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"user_id_2\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Анна\",\r\n  \"email\": \"anna@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.3 Получить список пользователей",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Получен список пользователей\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const users = pm.response.json();\r",
							"    pm.expect(users.length).to.be.above(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/users?from=0&size=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "1.4 Удалить второго пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Пользователь удалён\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Владимир Обновлённый\",\r\n  \"email\": \"vladimir.new@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/users/{{user_id_2}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users",
						"{{user_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "1.5 Создать второго пользователя после удаления",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Второй пользователь успешно создан\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"user_id_2\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Анна\",\r\n  \"email\": \"anna@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.1 Создать категорию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Категория успешно создана\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"category_id\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Конференции\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/categories",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.2 Обновить категорию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Категория успешно обновлена\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const category = pm.response.json();\r",
							"    pm.expect(category.name).to.eql(\"Технологические конференции\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Технологические конференции\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/categories/{{category_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"categories",
						"{{category_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.3 Получить все категории",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Список категорий получен\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const categories = pm.response.json();\r",
							"    pm.expect(categories.length).to.be.at.least(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/categories?from=0&size=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"categories"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2.4 Получить одну категорию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Категория по ID получена\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const category = pm.response.json();\r",
							"    pm.expect(category).to.have.property(\"id\", parseInt(pm.environment.get(\"category_id\")));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/categories/{{category_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"categories",
						"{{category_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.5 Удалить категорию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Категория удалена\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/categories/{{category_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"categories",
						"{{category_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "2.6 Создать категорию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Категория повторно создана\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"category_id\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"IT-конференции\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/categories",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.1 Создать событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Событие создано\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"event_id\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Крупнейшая технологическая конференция в Берлине\",\r\n  \"description\": \"Соберёмся в центре города, чтобы обсудить новейшие тренды в IT. Ожидаются доклады от Google, AWS и JetBrains.\",\r\n  \"eventDate\": \"{{future_date}}\",\r\n  \"location\": {\r\n    \"lat\": 52.5200,\r\n    \"lon\": 13.4050\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 100,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Berlin Tech Summit 2025\",\r\n  \"category\": {{category_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.2 Получить список своих событий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Список своих событий получен\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const events = pm.response.json();\r",
							"    pm.expect(events.length).to.be.at.least(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events?from=0&size=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3.3 Получить своё событие по ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Событие получено по ID\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const event = pm.response.json();\r",
							"    pm.expect(event).to.have.property(\"id\", parseInt(pm.environment.get(\"event_id\")));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events/{{event_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events",
						"{{event_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.4 Обновить своё событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Событие обновлено\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().title).to.eql(\"Обновлённый Berlin Tech Summit\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Обновлённая аннотация\",\r\n  \"description\": \"Мы обновили описание — теперь оно ещё круче!\",\r\n  \"eventDate\": \"{{future_date}}\",\r\n  \"title\": \"Обновлённый Berlin Tech Summit\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events/{{event_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events",
						"{{event_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "3.5 Публичный поиск — до публикации",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Событие ещё не опубликовано — список пуст\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const events = pm.response.json();\r",
							"    pm.expect(events.length).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/events?text=Tech&onlyAvailable=false&sort=EVENT_DATE&from=0&size=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"events"
					],
					"query": [
						{
							"key": "text",
							"value": "Tech"
						},
						{
							"key": "onlyAvailable",
							"value": "false"
						},
						{
							"key": "sort",
							"value": "EVENT_DATE"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4.1 Опубликовать событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Событие опубликовано\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().state).to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/events/{{event_id}}/publish",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"events",
						"{{event_id}}",
						"publish"
					]
				}
			},
			"response": []
		},
		{
			"name": "4.2 Публичная карточка — после публикации",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Карточка опубликованного события получена\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const event = pm.response.json();\r",
							"    pm.expect(event.id).to.eql(parseInt(pm.environment.get(\"event_id\")));\r",
							"    pm.expect(event.state).to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/events/{{event_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"events",
						"{{event_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.1 Подать заявку на участие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Заявка на участие подана\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"request_id\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_2}}/requests?eventId={{event_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_2}}",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5.2 Получить свои заявки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Список заявок получен\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const requests = pm.response.json();\r",
							"    pm.expect(requests.length).to.be.at.least(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_2}}/requests",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_2}}",
						"requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.3 Получить заявки на своё событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Список заявок на своё событие получен\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const requests = pm.response.json();\r",
							"    pm.expect(requests.length).to.be.at.least(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events/{{event_id}}/requests",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events",
						"{{event_id}}",
						"requests"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.4 Подтвердить заявку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Заявка подтверждена\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().status).to.eql(\"CONFIRMED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events/{{event_id}}/requests/{{request_id}}/confirm",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events",
						"{{event_id}}",
						"requests",
						"{{request_id}}",
						"confirm"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.5 Создать второе событие для отклонения заявки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Второе событие создано\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"event_id_2\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Второе тестовое событие\",\r\n  \"description\": \"Проверка отклонения заявок\",\r\n  \"eventDate\": \"{{future_date}}\",\r\n  \"location\": {\r\n    \"lat\": 55.7558,\r\n    \"lon\": 37.6173\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 10,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Событие для отклонения\",\r\n  \"category\": {{category_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.6 Опубликовать второе событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Второе событие опубликовано\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().state).to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/events/{{event_id_2}}/publish",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"events",
						"{{event_id_2}}",
						"publish"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.7 Подать заявку на второе событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Заявка на второе событие подана\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"request_id_2\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_2}}/requests?eventId={{event_id_2}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_2}}",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event_id_2}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5.8 Отклонить заявку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Заявка отклонена\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().status).to.eql(\"REJECTED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events/{{event_id_2}}/requests/{{request_id_2}}/reject",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events",
						"{{event_id_2}}",
						"requests",
						"{{request_id_2}}",
						"reject"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.9.1 Создать третье событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Третье событие создано\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"event_id_3\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"annotation\": \"Событие для отмены заявки\",\r\n  \"description\": \"Нужно для проверки отмены заявки со стороны участника\",\r\n  \"eventDate\": \"{{future_date}}\",\r\n  \"location\": {\r\n    \"lat\": 59.9343,\r\n    \"lon\": 30.3351\r\n  },\r\n  \"paid\": false,\r\n  \"participantLimit\": 20,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Событие #3: тест отмены\",\r\n  \"category\": {{category_id}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{user_id_1}}/events",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_1}}",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.9.2 Опубликовать третье событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Третье событие опубликовано\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().state).to.eql(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/events/{{event_id_3}}/publish",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"events",
						"{{event_id_3}}",
						"publish"
					]
				}
			},
			"response": []
		},
		{
			"name": "5.9.3 Подать заявку на третье событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Заявка на третье событие подана\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"request_id_3\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_2}}/requests?eventId={{event_id_3}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_2}}",
						"requests"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{event_id_3}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5.10 Отменить заявку пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Заявка отменена пользователем\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().status).to.eql(\"CANCELED\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/{{user_id_2}}/requests/{{request_id_3}}/cancel",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{user_id_2}}",
						"requests",
						"{{request_id_3}}",
						"cancel"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.1 Создать подборку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Подборка создана\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.environment.set(\"compilation_id\", pm.response.json().id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Лучшие события для Java-разработчиков\",\r\n  \"pinned\": true,\r\n  \"events\": [{{event_id}}, {{event_id_3}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/compilations",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"compilations"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.2 Обновить подборку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Подборка обновлена\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().title).to.eql(\"Подборка: Java и Spring Boot\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"title\": \"Подборка: Java и Spring Boot\",\r\n  \"pinned\": false,\r\n  \"events\": [{{event_id}}]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/admin/compilations/{{compilation_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"compilations",
						"{{compilation_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.3 Получить все подборки",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Список подборок получен\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    const list = pm.response.json();\r",
							"    pm.expect(list.length).to.be.at.least(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/compilations?pinned=false&from=0&size=10",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"compilations"
					],
					"query": [
						{
							"key": "pinned",
							"value": "false"
						},
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "6.4 Получить подборку по ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Подборка по ID получена\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json().id).to.eql(parseInt(pm.environment.get(\"compilation_id\")));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/compilations/{{compilation_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"compilations",
						"{{compilation_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6.5 Удалить подборку",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Подборка удалена\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/admin/compilations/{{compilation_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"admin",
						"compilations",
						"{{compilation_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
}